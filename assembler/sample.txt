.data
var1 .dword 10 # var1 should hold the immediate value 10
var2 .dword 5 # var2 should hold the immediate value 50
var3 .dword 25 # var3 holds imm 25
#test comment

.code
# for instructions wsb, dst, sh, lt, and lascii see test.txt program 
#initializing a target at the start of the program that can be branched/jumped to
@start
add $g0, $z0, $z0 # g0 = 0
add $g1, $g0, 10 # g1 = 10
sub $g2, $g1, 5 #g2 = 5
sub $g1, $g2, $g2 # g1 =0
add $g1, $g1, 5 # g1 = 5
sll $g3, $g1, 2 #g3 = 20
slr $g3, $g1, 1 # g3 = 4
slr $g4, $g3, $g3 #g4 = 0
sll $g4, $g1, $g3 #g4 = 80 
xor $g5, $g1, 10 #g5 = 15
beq $g5, $g4, branchOne # should not branch
xor $g4, $g5, $g3 #g4 = 11
and $g0, $g5, $g0 #g0 = 0
and $g3, $g4, 12 # g3 = 8
or $g2, $g4, $g3 #g2 = 11
or $g6, $g3, 3 #g6 = 11
beq $g6, $g2, branchOne #should branch
add $g0, $g0, 1 # should not happen

@branchOne
nor $g2, $g3, 10 # g2 = 5
nor $g1, $g2, $g3  # g1 = 2
nand $g4, $g4, $g1 # g4 = 13
nand $g5, $g5, 7 # g5 = 8
slt $g6, $g3, $g4 # g6 = 1
blez $g6, branchTwo  # should not be taken
slt $g4, $g1, 1 # g4 = 13
sub $g6, $g6, 2 # g6 = -1
blez $g6, branchTwo # should be taken
add $g0, $z0, 1 # should not happen

@branchTwo
jal jone
add $g0, $g0, 5 # should not happen

@jone

sub $g6, $g6, 4 # g6 = -5
add $g1, $g2, $g6 # g1 = 0
bgtz $g1, branchThree # should not be taken
add $g0, $z0, 15 # g0 = 15
bgtz $g4, branchThree # should be taken 
add $g0, $g0, 4 # should not happen

@branchThree
add $g3, $z0, 4 # g3 = 4
add $u0, $z0, 4 # u0 = 4
bne $g3, $u0, branchFour # should not be taken
add $g0, $z0, 1 # should happen g0 = 1
bne $g2, $g1, branchFour # should be taken

@branchFour
add $g1, $z0, 2 # g1 = 2
multl $g4, $g5, $g1 # $g4 = 16 
multl $g4, $g5, 8 # $g4 = 64
multh $g3, $g0, 100 # $g3 = 100
multh $g2, $g0, $g5 # $g2 = 8
blt $g4, $g2, end #should not be taken 
add $g0, $z0, 1 #should happen
blt $g2, $g4, end  # should be taken
add $g0, $g0, 1 #should not happen


@end
sw $g0, var3
lw $g1, var1
jump start
add $g0, $g0, 1 # should not happen